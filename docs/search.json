[{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gavinsimpson.github.io/canadaHCD/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gavin L. Simpson. Author, maintainer. Conor Anderson. Contributor.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Simpson GL (2023). canadaHCD: Canadian Historical Climate Data. R package version 0.0-3, https://github.com/gavinsimpson/canadaHCD/.","code":"@Manual{,   title = {canadaHCD: Canadian Historical Climate Data},   author = {Gavin L. Simpson},   year = {2023},   note = {R package version 0.0-3},   url = {https://github.com/gavinsimpson/canadaHCD/}, }"},{"path":"https://gavinsimpson.github.io/canadaHCD/index.html","id":"canadahcd","dir":"","previous_headings":"","what":"Canadian Historical Climate Data","title":"Canadian Historical Climate Data","text":"Access Canadian Historical Climate Data R. Government Canada’s Historical Climate Data website provides access hourly, daily, monthly weather records stations throughout Canada. raw data undergone quality control, issues changes station location unmanged; data original stationID stops certain point new stationID continues recording. curated data set climate change research broad spatial temporal scales see Adjusted Homogenized Canadian Climate Data (AHCCD).","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Canadian Historical Climate Data","text":"canadaHCD still active development towards 0.1 release. meantime, wish use package, please install github repo, easily achieved using Hadley Wickham’s remotes package:","code":"## install.packages(\"devtools\") remotes::install_github(\"gavinsimpson/canadaHCD\")"},{"path":"https://gavinsimpson.github.io/canadaHCD/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Canadian Historical Climate Data","text":"Say ’m interested climate data stations Yellowknife, can search known stationIDs \"Yellowknife\" name using find_station() download monthly HCD YELLOWKNIFE HYDRO can use hcd_monthly(), providing StationID particular weather station data returned tibble (tbl_df), shows compact version data frame. able work objects mostly data frames. Allthough yet exposed functions package, can access snapshot station metadata via canadaHCD:::station_data data frame. wanted know resolutions data available YELLOWKNIFE HYDRO station, can extract certain columns station data object output shows station hourly data, daily monthly data sets exist.","code":"library(\"canadaHCD\") find_station(\"Yellowknife\") #> # A tibble: 6 × 6 #>   Name                  Province              ClimateID StationID LatitudeDD #>   <chr>                 <chr>                 <chr>     <chr>          <dbl> #> 1 YELLOWKNIFE A         Northwest Territories 2204100   1706            62.5 #> 2 YELLOWKNIFE A         Northwest Territories 2204101   51058           62.5 #> 3 YELLOWKNIFE AIRPORT   Northwest Territories 2204108   55358           62.5 #> 4 YELLOWKNIFE-HENDERSON Northwest Territories 2204110   45467           62.4 #> 5 YELLOWKNIFE CS        Northwest Territories 2204155   27338           62.5 #> 6 YELLOWKNIFE HYDRO     Northwest Territories 2204200   1707            62.7 #>   LongitudeDD #>         <dbl> #> 1       -114. #> 2       -114. #> 3       -114. #> 4       -114. #> 5       -114. #> 6       -114. yh <- hcd_monthly(1707) yh #> # A tibble: 690 × 16 #>    Station           ClimateID Longitude Latitude Date      MaxTemp MinTemp #>    <chr>             <chr>         <dbl>    <dbl> <yearmon>   <dbl>   <dbl> #>  1 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Jan 1943     NA      NA   #>  2 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Feb 1943    -16.2   -26.4 #>  3 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Mar 1943    -14.4   -29.4 #>  4 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Apr 1943      1.2   -12.3 #>  5 YELLOWKNIFE HYDRO 2204200       -114.     62.7 May 1943      9.3    -3.6 #>  6 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Jun 1943     17.6     2.4 #>  7 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Jul 1943     20.6     9.6 #>  8 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Aug 1943     18.9     7.2 #>  9 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Sep 1943     10.9     2   #> 10 YELLOWKNIFE HYDRO 2204200       -114.     62.7 Oct 1943      6.1    -1.9 #>    MeanTemp ExtremeHigh ExtremeLow TotalRain TotalSnow TotalPrecip LastSnowGrnd #>       <dbl>       <dbl>      <dbl>     <dbl>     <dbl>       <dbl>        <int> #>  1     NA          NA         NA        NA        NA          NA             NA #>  2    -21.3         1.1      -44.4       0         9.4         9.4           NA #>  3    -21.9        -3.3      -40.6       0         2.8         2.8           NA #>  4     -5.6        12.2      -31.7       0        18          18             NA #>  5      2.9        20        -11.7       9.9       2.8        12.7           NA #>  6     10          27.2       -1.7       4.8       0           4.8           NA #>  7     15.1        27.2        4.4      36.6       0          36.6           NA #>  8     13.1        27.2        1.7      17.8       0          17.8           NA #>  9      6.5        18.3       -6.1       5.8       2.8         8.6           NA #> 10      2.1        17.2      -15.6      19.1       5.1        24.1           NA #> # ℹ 680 more rows #> # ℹ 2 more variables: MaxGustDir <int>, MaxGustSpeed <chr> canadaHCD:::station_data #> # A tibble: 8,797 × 20 #>    Name          Province ClimateID StationID WMOID TCID  LatitudeDD LongitudeDD #>    <chr>         <chr>    <chr>     <chr>     <chr> <chr>      <dbl>       <dbl> #>  1 ACTIVE PASS   British… 1010066   14        <NA>  <NA>        48.9       -123. #>  2 ALBERT HEAD   British… 1010235   15        <NA>  <NA>        48.4       -123. #>  3 BAMBERTON OC… British… 1010595   16        <NA>  <NA>        48.6       -124. #>  4 BEAR CREEK    British… 1010720   17        <NA>  <NA>        48.5       -124  #>  5 BEAVER LAKE   British… 1010774   18        <NA>  <NA>        48.5       -123. #>  6 BECHER BAY    British… 1010780   19        <NA>  <NA>        48.3       -124. #>  7 BRENTWOOD BA… British… 1010960   20        <NA>  <NA>        48.6       -123. #>  8 BRENTWOOD CL… British… 1010961   21        <NA>  <NA>        48.6       -123. #>  9 BRENTWOOD W … British… 1010965   22        <NA>  <NA>        48.6       -123. #> 10 CENTRAL SAAN… British… 1011467   25        <NA>  <NA>        48.6       -123. #>     Latitude   Longitude Elevation FirstYear LastYear HourlyFirstYr HourlyLastYr #>        <dbl>       <dbl>     <dbl>     <dbl>    <dbl>         <dbl>        <dbl> #>  1 485200000 -1231700000       4        1984     1996            NA           NA #>  2 482400000 -1232900000      17        1971     1995            NA           NA #>  3 483500000 -1233100000      85.3      1961     1980            NA           NA #>  4 483000000 -1240000000     350.       1910     1971            NA           NA #>  5 483000000 -1232100000      61        1894     1952            NA           NA #>  6 482000000 -1233800000      12.2      1956     1966            NA           NA #>  7 483600000 -1232800000      38        1987     1997            NA           NA #>  8 483400000 -1232700000      30.5      1972     1980            NA           NA #>  9 483400000 -1232600000      91.4      1960     1970            NA           NA #> 10 483500000 -1232500000      53.3      1963     1994            NA           NA #> # ℹ 8,787 more rows #> # ℹ 5 more variables: DailyFirstYr <dbl>, DailyLastYr <dbl>, MonthlyFirstYr <dbl>, MonthlyLastYr <dbl>, TimeZone <chr> id <- grep(\"YELLOWKNIFE HYDRO\", canadaHCD:::station_data$Name) vars <- c(\"HourlyFirstYr\", \"HourlyLastYr\", \"DailyFirstYr\", \"DailyLastYr\",     \"MonthlyFirstYr\", \"MonthlyLastYr\") canadaHCD:::station_data[id, vars] #> # A tibble: 1 × 6 #>   HourlyFirstYr HourlyLastYr DailyFirstYr DailyLastYr MonthlyFirstYr #>           <dbl>        <dbl>        <dbl>       <dbl>          <dbl> #> 1            NA           NA         1943        2000           1943 #>   MonthlyLastYr #>           <dbl> #> 1          2000"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/climate_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the ClimateID for a supplied StationID — climate_id","title":"Returns the ClimateID for a supplied StationID — climate_id","text":"Returns ClimateID supplied StationID","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/climate_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the ClimateID for a supplied StationID — climate_id","text":"","code":"climate_id(station)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/climate_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the ClimateID for a supplied StationID — climate_id","text":"station numeric character; StationIDs whose ClimateIDs returned.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/climate_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the ClimateID for a supplied StationID — climate_id","text":"character vector ClimateIDs.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/collapse_hcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind a list of HCD data sets, row-wise. — collapse_hcd","title":"Bind a list of HCD data sets, row-wise. — collapse_hcd","text":"Given list HCD data sets, collapse_hcd binds together element list (HCD dataset) row-wise single tibble.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/collapse_hcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind a list of HCD data sets, row-wise. — collapse_hcd","text":"","code":"collapse_hcd(l)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/collapse_hcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind a list of HCD data sets, row-wise. — collapse_hcd","text":"l list whose elements tibbles bound, row-wise.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/collapse_hcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind a list of HCD data sets, row-wise. — collapse_hcd","text":"tbl_df data row binding element input.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/collapse_hcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bind a list of HCD data sets, row-wise. — collapse_hcd","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/find_station.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a Historical Climate Data station — find_station","title":"Find a Historical Climate Data station — find_station","text":"Search stations Historical Climate Data inventory name.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/find_station.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a Historical Climate Data station — find_station","text":"","code":"find_station(name = NULL, ignore.case = TRUE, glob = FALSE, ...)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/find_station.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a Historical Climate Data station — find_station","text":"name character; character string regular expression matched known station names. See grep details. ignore.case logical; default search station names case-sensitive. glob logical; use wildcards (e.g. \"yell*\") name. See link{glob2rx} details. ... Additional arguments passed grep.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/find_station.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a Historical Climate Data station — find_station","text":"object class \"hcd_station_list\", \"tbl_df\", containing details matching HCD stations.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/find_station.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find a Historical Climate Data station — find_station","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/find_station.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a Historical Climate Data station — find_station","text":"","code":"find_station(\"Regina\") #> # A tibble: 23 × 6 #>    Name                      Province ClimateID StationID LatitudeDD LongitudeDD #>    <chr>                     <chr>    <chr>     <chr>          <dbl>       <dbl> #>  1 REGINA INT'L A            Saskatc… 4016560   3002            50.4       -105. #>  2 REGINA CO-OP UPGRADER SN… Saskatc… 4016562   46587           50.5       -105. #>  3 REGINA SIAST SNOW         Saskatc… 4016563   46588           50.4       -105. #>  4 REGINA RCMP SNOW          Saskatc… 4016565   46607           50.4       -105. #>  5 REGINA INTL A             Saskatc… 4016566   51441           50.4       -105. #>  6 REGINA BUSCH              Saskatc… 4016570   42263           50.4       -105. #>  7 REGINA CATHEDRAL          Saskatc… 4016590   3003            50.4       -105. #>  8 REGINA CDA                Saskatc… 4016640   3004            50.4       -105. #>  9 REGINA CITY GREENHOUSES   Saskatc… 4016641   3005            50.5       -105. #> 10 REGINA EXP FARM SUBSTN    Saskatc… 4016643   3006            50.4       -105. #> # ℹ 13 more rows  find_station(\"Yellowknife\") #> # A tibble: 6 × 6 #>   Name                  Province      ClimateID StationID LatitudeDD LongitudeDD #>   <chr>                 <chr>         <chr>     <chr>          <dbl>       <dbl> #> 1 YELLOWKNIFE A         Northwest Te… 2204100   1706            62.5       -114. #> 2 YELLOWKNIFE A         Northwest Te… 2204101   51058           62.5       -114. #> 3 YELLOWKNIFE AIRPORT   Northwest Te… 2204108   55358           62.5       -114. #> 4 YELLOWKNIFE-HENDERSON Northwest Te… 2204110   45467           62.4       -114. #> 5 YELLOWKNIFE CS        Northwest Te… 2204155   27338           62.5       -114. #> 6 YELLOWKNIFE HYDRO     Northwest Te… 2204200   1707            62.7       -114.  find_station(\"Yell*\", glob = TRUE) #> # A tibble: 9 × 6 #>   Name                  Province      ClimateID StationID LatitudeDD LongitudeDD #>   <chr>                 <chr>         <chr>     <chr>          <dbl>       <dbl> #> 1 YELLOWKNIFE A         Northwest Te… 2204100   1706            62.5       -114. #> 2 YELLOWKNIFE A         Northwest Te… 2204101   51058           62.5       -114. #> 3 YELLOWKNIFE AIRPORT   Northwest Te… 2204108   55358           62.5       -114. #> 4 YELLOWKNIFE-HENDERSON Northwest Te… 2204110   45467           62.4       -114. #> 5 YELLOWKNIFE CS        Northwest Te… 2204155   27338           62.5       -114. #> 6 YELLOWKNIFE HYDRO     Northwest Te… 2204200   1707            62.7       -114. #> 7 YELLOWHEAD LO         Alberta       3067680   2641            53.2       -117. #> 8 YELLOW GRASS          Saskatchewan  4019040   3060            49.8       -104. #> 9 YELLOW GRASS NORTH    Saskatchewan  4019041   54518           49.8       -104."},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_daily.html","id":null,"dir":"Reference","previous_headings":"","what":"Download daily Historical Climate Data records — hcd_daily","title":"Download daily Historical Climate Data records — hcd_daily","text":"Daily Historical Climate Data stated station IDs downloaded Government Canada's Historical Climate Data website.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_daily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download daily Historical Climate Data records — hcd_daily","text":"","code":"hcd_daily(station, year, collapse = TRUE, progress = TRUE, ...)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_daily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download daily Historical Climate Data records — hcd_daily","text":"station Character numeric; one HCD station IDs. year numeric; vector one years collapse Logical; TRUE multiple stations requested single data frame returned, formed row-binding data station prepending station identifier variable. progress Logical; TRUE, bar shown indicating progress downloading station data HCD website. ... arguments passed read_hcd.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_daily.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download daily Historical Climate Data records — hcd_daily","text":"tbl_df containing requested monthly climate data","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_daily.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download daily Historical Climate Data records — hcd_daily","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download CSV files of Historical Climate Data records — hcd_download","title":"Download CSV files of Historical Climate Data records — hcd_download","text":"Downloads raw CSV data files Canadian Historical Climate Data website. raw files obtain accessed data record HCD website.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download CSV files of Historical Climate Data records — hcd_download","text":"","code":"hcd_download(   station,   file,   dir = tempdir(),   timescale = c(\"monthly\", \"daily\", \"hourly\"),   year = NULL,   month = NULL,   progress = TRUE )"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download CSV files of Historical Climate Data records — hcd_download","text":"station character; one HCD station IDs. file character; one file names. supplied, file names form station-year-month.csv, year month appended determined argument timescale. dir character; vector one directory paths CSV files saved.scale requested Historical Climate Data records. multiple paths supplied, one path per station. timescale character; timescale requested Historical Climate Data records. year numeric; vector one years. Needed daily hourly data . month numeric; vector one months. Needed hourly data . progress logical; TRUE, bar shown indicating progress downloading station data HCD website.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download CSV files of Historical Climate Data records — hcd_download","text":"character vector containing file paths downloaded CSVs returned invisibly.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_download.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download CSV files of Historical Climate Data records — hcd_download","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download CSV files of Historical Climate Data records — hcd_download","text":"","code":"f <- hcd_download(1707, timescale = \"monthly\") #>    |                                                                               |                                                                      |   0%   |                                                                               |======================================================================| 100% file.exists(f) #> [1] TRUE  ## specifying multiple storage folders dirs <- file.path(tempdir(), c(\"2855\", \"1707\")) dir.create(dirs[1]) dir.create(dirs[2]) f <- hcd_download(c(2855, 1707), timescale = \"monthly\", dir = dirs) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% file.exists(f) #> [1] TRUE TRUE ## ...and daily f <- hcd_download(c(2855, 1707), timescale = \"daily\", dir = dirs,                   year = 1999:2000) #>    |                                                                               |                                                                      |   0%   |                                                                               |==================                                                    |  25%   |                                                                               |===================================                                   |  50%   |                                                                               |====================================================                  |  75%   |                                                                               |======================================================================| 100% file.exists(f) #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_hourly.html","id":null,"dir":"Reference","previous_headings":"","what":"Download hourly Historical Climate Data records — hcd_hourly","title":"Download hourly Historical Climate Data records — hcd_hourly","text":"Hourly Historical Climate Data stated station IDs downloaded Government Canada's Historical Climate Data website.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_hourly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download hourly Historical Climate Data records — hcd_hourly","text":"","code":"hcd_hourly(station, year, month, collapse = TRUE, progress = TRUE, ...)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_hourly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download hourly Historical Climate Data records — hcd_hourly","text":"station Character numeric; one HCD station IDs. year numeric; vector one years month numeric; vector one months collapse Logical; TRUE multiple stations requested single data frame returned, formed row-binding data station prepending station identifier variable. progress Logical; TRUE, bar shown indicating progress downloading station data HCD website. ... arguments passed read_hcd.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_hourly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download hourly Historical Climate Data records — hcd_hourly","text":"tibble::tbl_df containing requested hourly climate data.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_hourly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download hourly Historical Climate Data records — hcd_hourly","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_monthly.html","id":null,"dir":"Reference","previous_headings":"","what":"Download monthly Historical Climate Data records — hcd_monthly","title":"Download monthly Historical Climate Data records — hcd_monthly","text":"Monthly Historical Climate Data stated station IDs downloaded Government Canada's Historical Climate Data website.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_monthly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download monthly Historical Climate Data records — hcd_monthly","text":"","code":"hcd_monthly(station, collapse = TRUE, progress = TRUE, ...)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_monthly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download monthly Historical Climate Data records — hcd_monthly","text":"station Character; one HCD station IDs. collapse Logical; TRUE multiple stations requested single data frame returned, formed row-binding data station prepending station identifier variable. progress Logical; TRUE, bar shown indicating progress downloading station data HCD website. ... arguments passed read_hcd.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_monthly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download monthly Historical Climate Data records — hcd_monthly","text":"tbl_df containing requested monthly climate data","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_monthly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download monthly Historical Climate Data records — hcd_monthly","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate URLs to Historical Climate Data records — hcd_url","title":"Generate URLs to Historical Climate Data records — hcd_url","text":"Form URLs requested Canadian Historical Climate Data records.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate URLs to Historical Climate Data records — hcd_url","text":"","code":"hcd_url(station, timescale = c(\"monthly\", \"daily\", \"hourly\"), year, month)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate URLs to Historical Climate Data records — hcd_url","text":"station character; one HCD station IDs. timescale character; timescale requested Historical Climate Data records. year numeric; vector one years. Needed daily hourly data . month numeric; vector one months. Needed hourly data .","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate URLs to Historical Climate Data records — hcd_url","text":"character vector containing URLs requested stations time scales.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_url.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate URLs to Historical Climate Data records — hcd_url","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/hcd_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate URLs to Historical Climate Data records — hcd_url","text":"","code":"urls <- hcd_url(c(2855, 1707), timescale = \"monthly\") urls #> # A tibble: 2 × 2 #>   station url                                                                    #>   <chr>   <chr>                                                                  #> 1 2855    http://climate.weather.gc.ca/climate_data/bulk_data_e.html?stationID=… #> 2 1707    http://climate.weather.gc.ca/climate_data/bulk_data_e.html?stationID=… head(urls$url) #> [1] \"http://climate.weather.gc.ca/climate_data/bulk_data_e.html?stationID=2855&Year=2000&Month=1&Day=14&format=csv&timeframe=3&submit=%20Download+Data\" #> [2] \"http://climate.weather.gc.ca/climate_data/bulk_data_e.html?stationID=1707&Year=2000&Month=1&Day=14&format=csv&timeframe=3&submit=%20Download+Data\""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Historical Climate Data files — read_hcd","title":"Read Historical Climate Data files — read_hcd","text":"Reads data CSV files download Canada Historical Climate Data website. function knows hourly, daily, monthly data formatted files.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Historical Climate Data files — read_hcd","text":"","code":"read_hcd(file, flags = FALSE, clean = TRUE, ...)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Historical Climate Data files — read_hcd","text":"file Either path file, connection. See argument file read_csv. flags Logical; variable flag columns preserved. default results columns dropped returned data. clean Logical; variable names cleaned? default replaces variable identifiers CSV files useful names use R code. ... arguments passed read_csv.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Historical Climate Data files — read_hcd","text":"tbl_df.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Historical Climate Data files — read_hcd","text":"Gavin L. Simpson","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":"fixme-if-hadley-fixes-the-bug-in-count-fields-add-it-back-here-as","dir":"Reference","previous_headings":"","what":"FIXME: if hadley fixes the bug in count_fields, add it back here as","title":"Read Historical Climate Data files — read_hcd","text":"import readr & remove utils import","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/read_hcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Historical Climate Data files — read_hcd","text":"","code":"## read a monthly data file read_hcd(system.file(\"extdata/2855-monthly-data.csv\", package = \"canadaHCD\")) #> # A tibble: 515 × 16 #>    Station   ClimateID Longitude Latitude Date      MaxTemp MinTemp MeanTemp #>    <chr>     <chr>         <dbl>    <dbl> <yearmon>   <dbl>   <dbl>    <dbl> #>  1 BROADVIEW 4010879       -103.     50.4 Jan 1965     NA      NA       NA   #>  2 BROADVIEW 4010879       -103.     50.4 Feb 1965     NA      NA       NA   #>  3 BROADVIEW 4010879       -103.     50.4 Mar 1965     -8.1   -20.4    -14.3 #>  4 BROADVIEW 4010879       -103.     50.4 Apr 1965      7.3    -1.9      2.7 #>  5 BROADVIEW 4010879       -103.     50.4 May 1965     16       1.9      9   #>  6 BROADVIEW 4010879       -103.     50.4 Jun 1965     21.7     9.4     15.6 #>  7 BROADVIEW 4010879       -103.     50.4 Jul 1965     24.7    10.4     17.6 #>  8 BROADVIEW 4010879       -103.     50.4 Aug 1965     24.6     9.1     16.9 #>  9 BROADVIEW 4010879       -103.     50.4 Sep 1965     10.4     0.1      5.3 #> 10 BROADVIEW 4010879       -103.     50.4 Oct 1965     14.1    -0.6      6.8 #> # ℹ 505 more rows #> # ℹ 8 more variables: ExtremeHigh <dbl>, ExtremeLow <dbl>, TotalRain <dbl>, #> #   TotalSnow <dbl>, TotalPrecip <dbl>, LastSnowGrnd <int>, MaxGustDir <int>, #> #   MaxGustSpeed <chr>  ## read a daily data file read_hcd(system.file(\"extdata/2855-daily-data-2015.csv\",   package = \"canadaHCD\")) #> # A tibble: 365 × 16 #>    Station   ClimateID Longitude Latitude Date       MaxTemp MinTemp MeanTemp #>    <chr>     <chr>         <dbl>    <dbl> <date>       <dbl>   <dbl>    <dbl> #>  1 BROADVIEW 4010879       -103.     50.4 2015-01-01    -4.9   -12.7     -8.8 #>  2 BROADVIEW 4010879       -103.     50.4 2015-01-02    -3.9   -19.6    -11.8 #>  3 BROADVIEW 4010879       -103.     50.4 2015-01-03   -19.5   -29.9    -24.7 #>  4 BROADVIEW 4010879       -103.     50.4 2015-01-04   -26.9   -34.9    -30.9 #>  5 BROADVIEW 4010879       -103.     50.4 2015-01-05   -19.3   -31.3    -25.3 #>  6 BROADVIEW 4010879       -103.     50.4 2015-01-06   -20.7   -25.4    -23.1 #>  7 BROADVIEW 4010879       -103.     50.4 2015-01-07   -13     -29.4    -21.2 #>  8 BROADVIEW 4010879       -103.     50.4 2015-01-08   -13.2   -21.7    -17.5 #>  9 BROADVIEW 4010879       -103.     50.4 2015-01-09   -18.9   -24.1    -21.5 #> 10 BROADVIEW 4010879       -103.     50.4 2015-01-10   -20.9   -27.5    -24.2 #> # ℹ 355 more rows #> # ℹ 8 more variables: HeatDegDays <dbl>, CoolDegDays <dbl>, TotalRain <dbl>, #> #   TotalSnow <dbl>, TotalPrecip <dbl>, GroundSnow <int>, MaxGustDir <int>, #> #   MaxGustSpeed <chr>"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/station_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the StationID for a supplied ClimateID — station_id","title":"Returns the StationID for a supplied ClimateID — station_id","text":"Returns StationID supplied ClimateID","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/station_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the StationID for a supplied ClimateID — station_id","text":"","code":"station_id(id)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/station_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the StationID for a supplied ClimateID — station_id","text":"id numeric character; ClimateIDs whose StationIDs returned.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/station_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the StationID for a supplied ClimateID — station_id","text":"character vector StationIDs","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/update_station_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download station data — update_station_data","title":"Download station data — update_station_data","text":"Download station data","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/update_station_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download station data — update_station_data","text":"","code":"update_station_data(force = FALSE)"},{"path":"https://gavinsimpson.github.io/canadaHCD/reference/update_station_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download station data — update_station_data","text":"force logical; force station data updated?","code":""},{"path":[]},{"path":"https://gavinsimpson.github.io/canadaHCD/news/index.html","id":"user-visible-changes-0-0-3","dir":"Changelog","previous_headings":"","what":"User visible changes","title":"canadaHCD 0.0.3","text":"Data sets now return Climate ID variable Climate ID, Station ID. change data files can downloaded Canadian Historical Climate Data server. Reported @BastienFR #28 Time zone information now added DateTime (POSIXct) variable returned hourly data. time zone station stored station_data, looked using tz_lookup_coords() lutz package. #18 Reported @BastienFR lutz solution suggested @ateucher","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/news/index.html","id":"new-features-0-0-3","dir":"Changelog","previous_headings":"","what":"New features","title":"canadaHCD 0.0.3","text":"climate_id() station_id() functions return Climate ID (Station ID) supplied Station ID (Climate ID). helper functions facilitate switching two identifier systems used HCD system. update_station_data() can update station data stored within canadaHCD. Currently downloads formats station data, eventually replace stored data.","code":""},{"path":"https://gavinsimpson.github.io/canadaHCD/news/index.html","id":"bug-fixes-0-0-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"canadaHCD 0.0.3","text":"hcd_hourly() related functions updated read new data structure hourly data. Reported @dankelly #29 collapse_hcd() now explicitly sorts data Date / DateTime. Reported @ConorIA #26","code":""}]
